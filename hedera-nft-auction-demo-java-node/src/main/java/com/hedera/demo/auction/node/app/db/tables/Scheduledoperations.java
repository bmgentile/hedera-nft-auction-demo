/*
 * This file is generated by jOOQ.
 */
package com.hedera.demo.auction.node.app.db.tables;


import com.hedera.demo.auction.node.app.db.Keys;
import com.hedera.demo.auction.node.app.db.Public;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Scheduledoperations extends TableImpl<Record> {

    private static final long serialVersionUID = 710507178;

    /**
     * The reference instance of <code>public.scheduledoperations</code>
     */
    public static final Scheduledoperations SCHEDULEDOPERATIONS = new Scheduledoperations();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>public.scheduledoperations.transactiontype</code>.
     */
    public final TableField<Record, String> TRANSACTIONTYPE = createField(DSL.name("transactiontype"), org.jooq.impl.SQLDataType.CLOB.defaultValue(org.jooq.impl.DSL.field("''::text", org.jooq.impl.SQLDataType.CLOB)), this, "");

    /**
     * The column <code>public.scheduledoperations.transactiontimestamp</code>.
     */
    public final TableField<Record, String> TRANSACTIONTIMESTAMP = createField(DSL.name("transactiontimestamp"), org.jooq.impl.SQLDataType.CLOB.defaultValue(org.jooq.impl.DSL.field("''::text", org.jooq.impl.SQLDataType.CLOB)), this, "");

    /**
     * The column <code>public.scheduledoperations.auctionid</code>.
     */
    public final TableField<Record, Integer> AUCTIONID = createField(DSL.name("auctionid"), org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.scheduledoperations.transactionid</code>.
     */
    public final TableField<Record, String> TRANSACTIONID = createField(DSL.name("transactionid"), org.jooq.impl.SQLDataType.CLOB.defaultValue(org.jooq.impl.DSL.field("''::text", org.jooq.impl.SQLDataType.CLOB)), this, "");

    /**
     * The column <code>public.scheduledoperations.status</code>.
     */
    public final TableField<Record, String> STATUS = createField(DSL.name("status"), org.jooq.impl.SQLDataType.CLOB.defaultValue(org.jooq.impl.DSL.field("'PENDING'::text", org.jooq.impl.SQLDataType.CLOB)), this, "");

    /**
     * The column <code>public.scheduledoperations.memo</code>.
     */
    public final TableField<Record, String> MEMO = createField(DSL.name("memo"), org.jooq.impl.SQLDataType.CLOB.defaultValue(org.jooq.impl.DSL.field("''::text", org.jooq.impl.SQLDataType.CLOB)), this, "");

    /**
     * The column <code>public.scheduledoperations.result</code>.
     */
    public final TableField<Record, String> RESULT = createField(DSL.name("result"), org.jooq.impl.SQLDataType.CLOB.defaultValue(org.jooq.impl.DSL.field("''::text", org.jooq.impl.SQLDataType.CLOB)), this, "");

    /**
     * Create a <code>public.scheduledoperations</code> table reference
     */
    public Scheduledoperations() {
        this(DSL.name("scheduledoperations"), null);
    }

    /**
     * Create an aliased <code>public.scheduledoperations</code> table reference
     */
    public Scheduledoperations(String alias) {
        this(DSL.name(alias), SCHEDULEDOPERATIONS);
    }

    /**
     * Create an aliased <code>public.scheduledoperations</code> table reference
     */
    public Scheduledoperations(Name alias) {
        this(alias, SCHEDULEDOPERATIONS);
    }

    private Scheduledoperations(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private Scheduledoperations(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Scheduledoperations(Table<O> child, ForeignKey<O, Record> key) {
        super(child, key, SCHEDULEDOPERATIONS);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<UniqueKey<Record>> getKeys() {
        return Arrays.<UniqueKey<Record>>asList(Keys.SCHEDULEDOPERATIONS_TRANSACTIONTIMESTAMP_KEY, Keys.SCHEDULEDOPERATIONS_TRANSACTIONID_KEY);
    }

    @Override
    public Scheduledoperations as(String alias) {
        return new Scheduledoperations(DSL.name(alias), this);
    }

    @Override
    public Scheduledoperations as(Name alias) {
        return new Scheduledoperations(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Scheduledoperations rename(String name) {
        return new Scheduledoperations(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Scheduledoperations rename(Name name) {
        return new Scheduledoperations(name, null);
    }
}
