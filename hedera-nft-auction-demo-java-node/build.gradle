import groovy.xml.MarkupBuilder
import org.jooq.codegen.GenerationTool

import javax.xml.bind.JAXB

buildscript {
	repositories {
		gradlePluginPortal()
		mavenLocal()
		mavenCentral()
	}
	dependencies {
		classpath "org.glassfish.jaxb:jaxb-runtime:2.3.2"
		classpath "org.postgresql:postgresql:42.2.14"
		classpath "io.github.jklingsporn:vertx-jooq-generate:5.2.0"
		classpath "io.vertx:vertx-core:3.9.2"
	}
}

plugins {
	id 'idea'
	id "nebula.lint" version "16.9.0"
	id 'com.github.johnrengelman.shadow' version '6.0.0' apply false
	id "net.ltgt.errorprone" version "1.3.0" apply false
	id "com.github.ben-manes.versions" version "0.29.0" apply false
	id "org.flywaydb.flyway" version "6.5.5"
	id 'nu.studer.jooq' version '5.0.1'
//	id "com.chrisgahlert.gradle-dcompose-plugin" version "0.17.2"
}

allprojects {
	apply plugin: "java"
	apply plugin: "idea"
	apply plugin: "net.ltgt.errorprone"
	apply plugin: "com.github.ben-manes.versions"
	apply plugin :"nebula.lint"
	gradleLint {
		rules=['unused-dependency']
	}
	sourceCompatibility = 14
	targetCompatibility = 14

	repositories {
		jcenter()
	}

	sourceSets {
		main {
			resources {
				srcDirs "src/main/resources"
			}
		}
		integrationTest {
			java {
				compileClasspath += main.output + test.output
				runtimeClasspath += main.output + test.output
				srcDir file('src/integration-test/java')
			}
			resources.srcDir file('src/integration-test/resources')
		}
		systemTest {
			java {
				compileClasspath += main.output + test.output
				runtimeClasspath += main.output + test.output
				srcDir file('src/system-test/java')
			}
			resources.srcDir file('src/system-test/resources')
		}
	}

	idea {
		module {
			sourceDirs -= file("src/integration-test/java")
			testSourceDirs += file("src/integration-test/java")
			sourceDirs -= file("src/system-test/java")
			testSourceDirs += file("src/system-test/java")
		}
	}

	configurations {
		integrationTestCompile.extendsFrom testImplementation
		integrationTestRuntime.extendsFrom testRuntimeOnly

		systemTestCompile.extendsFrom testImplementation
		systemTestRuntime.extendsFrom testRuntimeOnly
	}

	dependencies {
		implementation 'com.google.guava:guava:29.0-jre'

		// https://github.com/google/error-prone
		// https://errorprone.info/
		errorprone "com.google.errorprone:error_prone_core:2.5.1"
		compileOnly "com.google.errorprone:error_prone_annotations:2.5.1"

		// https://github.com/uber/NullAway
		errorprone "com.uber.nullaway:nullaway:0.7.9"

		// https://github.com/eclipse-ee4j/common-annotations-api
		implementation "jakarta.annotation:jakarta.annotation-api:2.0.0-RC1"
	}

	tasks.withType(JavaCompile).configureEach {
		options.encoding = "UTF-8"

		options.errorprone {
			// https://github.com/uber/NullAway
			warn("NullAway")
			option("NullAway:AnnotatedPackages", "com.hedera.demo.auction.node.app")
			option("NullAway:TreatGeneratedAsUnannotated", "true")

			// Enable _all_ error prone checks then selectively disable
			// Checks that are default-disabled are enabled as warnings
			allDisabledChecksAsWarnings = true
			disable("Java7ApiChecker")
			disable("AndroidJdkLibsChecker")
//			disable("FieldMissingNullable")
			disable("CatchAndPrintStackTrace")
			disable("ThrowSpecificExceptions")

			// Ignore generated and protobuf code
			disableWarningsInGeneratedCode = true
			excludedPaths = "(.*proto.*)|(.*generated.*)|(.*db.*)"
		}
	}

}

apply plugin: 'application'
apply plugin: 'com.github.johnrengelman.shadow'

group = "com.hedera.demo.auction.node"
version = "1.0"
description = "Hederaâ„¢ Hashgraph NFT Auction Appnet Demo"

dependencies {
	implementation "io.github.cdimascio:java-dotenv:5.2.1"
//	implementation 'com.hedera.hashgraph:sdk:2.0.4'
// https://mvnrepository.com/artifact/com.hedera.hashgraph/sdk
	implementation group: 'com.hedera.hashgraph', name: 'sdk', version: '2.0.5-beta.3'


	implementation 'io.grpc:grpc-netty-shaded:1.35.0'

	implementation "io.vertx:vertx-web:3.9.2"
	implementation "io.vertx:vertx-pg-client:3.9.2"
	implementation "io.vertx:vertx-web-client:3.9.2"
	implementation "io.github.jklingsporn:vertx-jooq-classic-reactive:5.2.0"
	implementation 'commons-codec:commons-codec:1.9'
	// http
	implementation group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.13'
	implementation group: 'org.apache.httpcomponents', name: 'httpcore', version: '4.4.14'
	implementation group: 'org.apache.httpcomponents', name: 'httpmime', version: '4.5.13'
	// jOOQ
	implementation 'org.jooq:jooq:3.13.4'
	implementation 'org.jooq:jooq-meta:3.13.4'
	runtimeOnly 'org.postgresql:postgresql:42.2.14'

	// jOOQ database driver
	jooqGenerator 'org.postgresql:postgresql:42.2.14'

	// logging
	compile 'org.apache.logging.log4j:log4j-core:2.13.2'

	// lombok
	compileOnly 'org.projectlombok:lombok:1.18.16'
	annotationProcessor 'org.projectlombok:lombok:1.18.16'
	testCompileOnly 'org.projectlombok:lombok:1.18.16'
	testAnnotationProcessor 'org.projectlombok:lombok:1.18.16'

	// flyway
	compile "org.flywaydb:flyway-core:7.7.0"

	// Testing
	def junitJupiterVersion = '5.4.2'
	testImplementation 'org.junit.jupiter:junit-jupiter-api:$junitJupiterVersion'
	testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:$junitJupiterVersion'

	testImplementation 'io.vertx:vertx-junit5:3.9.2'

	testRuntimeOnly "org.testcontainers:testcontainers:1.15.2"
	testImplementation "org.testcontainers:junit-jupiter:1.15.2"
	testImplementation "org.testcontainers:postgresql:1.15.2"

}

tasks.withType(Test) {
	useJUnitPlatform()

	// this task will fail on the first failed test
	failFast = true

	// emit logs per passed or failed test
	testLogging {
		exceptionFormat = 'full'
		events "passed", "skipped", "failed", "standardOut", "standardError"
	}

	// propagate system environment to test runner
	systemProperty "OPERATOR_ID", findProperty("OPERATOR_ID")
	systemProperty "OPERATOR_KEY", findProperty("OPERATOR_KEY")
	systemProperty "CONFIG_FILE", findProperty("CONFIG_FILE")
	systemProperty "HEDERA_NETWORK", findProperty("HEDERA_NETWORK")
}

//dcompose {
//	testDatabase {
//		baseDir = file('testContainers/')
//		dockerFilename = 'DockerfilePostgres'
//		portBindings = ['5433']
//	}
//}

task integrationTest(type: Test) {
	testClassesDirs = sourceSets.integrationTest.output.classesDirs
	classpath = sourceSets.integrationTest.runtimeClasspath
	outputs.upToDateWhen { false }

//	dependsOn startTestDatabaseContainer
//
//	finalizedBy removeTestDatabaseImage
}

task systemTest(type: Test) {
	testClassesDirs = sourceSets.systemTest.output.classesDirs
	classpath = sourceSets.systemTest.runtimeClasspath
	outputs.upToDateWhen { false }
}

flyway {
	def dbURL = System.getenv("DATABASE_URL") ?: "postgresql://localhost:5432/postgres"
	def dbUSER = System.getenv("DATABASE_USERNAME") ?: "postgres"
	def dbPASS = System.getenv("DATABASE_PASSWORD") ?: "password"

	url = "jdbc:${dbURL}"
	user = "${dbUSER}"
	password = "${dbPASS}"
	locations = ['filesystem:src/main/resources/migrations']
}

task jooqGenerate {

	doLast() {
		def dbURL = System.getenv("DATABASE_URL") ?: "postgresql://localhost:5432/postgres"
		def dbUSER = System.getenv("DATABASE_USERNAME") ?: "postgres"
		def dbPASS = System.getenv("DATABASE_PASSWORD") ?: "password"
		def writer = new StringWriter()

		new MarkupBuilder(writer)
				.configuration('xmlns': 'http://www.jooq.org/xsd/jooq-codegen-3.13.0.xsd') {
					jdbc {
						driver('org.postgresql.Driver')
						url("jdbc:${dbURL}")
						user("${dbUSER}")
						password("${dbPASS}")
					}
					generator {
						name('io.github.jklingsporn.vertx.jooq.generate.classic.ClassicReactiveVertxGenerator')
						database {
							name('org.jooq.meta.postgres.PostgresDatabase')
							inputSchema('public')
						}
						generate([:]) {
							deprecated(false)
							records(false)
							interfaces(false)
							fluentSetters(false)
                            pojos(false)
							daos(false)
						}
						target() {
							packageName('com.hedera.demo.auction.node.app.db')
							directory("$projectDir/src/main/java")
						}
						strategy {
							name('io.github.jklingsporn.vertx.jooq.generate.VertxGeneratorStrategy')
						}
					}
				}

		GenerationTool.generate(
				JAXB.unmarshal(new StringReader(writer.toString()), org.jooq.meta.jaxb.Configuration.class)
		)
	}
}

if (project.hasProperty("args")) {
	ext.cmdargs = project.getProperty("args")
} else {
	ext.cmdargs = ""
}

task runNode(type: JavaExec) {
	group = "Execution"
	description = "Runs the application"
	classpath = sourceSets.main.runtimeClasspath
	main = "com.hedera.demo.auction.node.app.App"
	args cmdargs.split()
}

task createTopic(type: JavaExec) {
	group = "Execution"
	description = "Creates a topic id and updates the .env file with the result"
	classpath = sourceSets.main.runtimeClasspath
	main = "com.hedera.demo.auction.node.app.CreateTopic"
	args cmdargs.split()
}

task createAuction(type: JavaExec) {
	group = "Execution"
	description = "Creates an auction from a file which is submitted to a Topic"
	classpath = sourceSets.main.runtimeClasspath
	main = "com.hedera.demo.auction.node.app.CreateAuction"
	args cmdargs.split()
}

task createAuctionAccount(type: JavaExec) {
	group = "Execution"
	description = "Creates an auction account with threshold keys"
	classpath = sourceSets.main.runtimeClasspath
	main = "com.hedera.demo.auction.node.app.CreateAuctionAccount"
	args cmdargs.split()
}

task createToken(type: JavaExec) {
	group = "Execution"
	description = "Creates a token"
	classpath = sourceSets.main.runtimeClasspath
	main = "com.hedera.demo.auction.node.app.CreateToken"
	args cmdargs.split()
}

task createTokenTransfer(type: JavaExec) {
	group = "Execution"
	description = "Creates a token"
	classpath = sourceSets.main.runtimeClasspath
	main = "com.hedera.demo.auction.node.app.CreateTokenTransfer"
	args cmdargs.split()
}

task easySetup(type: JavaExec) {
	group = "Execution"
	description = "Sets up the demo with default parameters"
	classpath = sourceSets.main.runtimeClasspath
	main = "com.hedera.demo.auction.node.app.EasySetup"
	args cmdargs.split()
}

application {
	mainClassName = 'com.hedera.demo.auction.node.app.App'
}

jar {
	enabled = false
	manifest {
		attributes 'Main-Class': 'com.hedera.demo.auction.node.app.App'
	}
}

tasks.shadowJar.configure {
	classifier = null
}

tasks.withType(JavaCompile).configureEach {
	options.errorprone {
		disable("DefaultPackage")
	}
}

